[gd_resource type="Shader" format=2]

[resource]
code = "/******************************************************
This shader blends two separate top and side textures, each with their own triplanar mapped albedo, normal and ambient occlusion.

Texture A is the top surface.
Texture B are the sides and bottom.

The typical use case would be to have grass on top and a rocky surface on the sides and bottom of a terrain.

This version of the shader shows an obvious repeating pattern when wide, flat areas are textured. This is inevitable when stamping
the same texture over and over. Version 2 of this shader fixes this issue at the cost of additional texture lookups.

Last modified: 2019-12-23

******************************************************/


shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,world_vertex_coords;

uniform float 		AB_mix_offset : hint_range(-11., 2.5) = -6.187;
uniform float 		AB_mix_normal : hint_range(0., 20.) = 8.253;
uniform float 		AB_mix_blend : hint_range(0., 10.) = 2.;

uniform float lamination_layers : hint_range(0.01,30.) = 2.;
uniform float lamination_thickness : hint_range(0.01,0.5) = 0.1;
uniform float lamination_waviness : hint_range(0.01,20.) = 0.1;
uniform float lamination_compression : hint_range(1.,5.) = 2.;

uniform bool		A_albedo_enabled = true;
uniform vec4 		A_albedo_primary : hint_color;
uniform vec4 		A_albedo_secondary : hint_color;
uniform sampler2D 	A_albedo_map : hint_albedo;

uniform bool		A_normal_enabled = true;
uniform sampler2D 	A_normal_map : hint_normal;
uniform float 		A_normal_strength : hint_range(-16., 16.0) = 1.;

uniform float 		A_roughness : hint_range(0., 1.0) = 1.;

uniform vec4 		A_ao_tex_channel = vec4(.33, .33, .33, 0.);		
uniform bool		A_ao_enabled = true;
uniform float 		A_ao_strength : hint_range(-1., 10.0) = 1.; 
uniform sampler2D 	A_ao_map : hint_white;

uniform vec3 		A_uv_offset;
uniform float 		A_uv_tiles : hint_range(0., 16.) = 1.;
uniform float 		A_uv_scale : hint_range(0.,20.) = 8.;
uniform float 		A_tri_blend_sharpness : hint_range(0.001, 50.0) = 17.86;

uniform bool		B_albedo_enabled = true;
uniform vec4 		B_albedo_primary : hint_color;
uniform vec4 		B_albedo_secondary : hint_color;
uniform sampler2D 	B_albedo_map : hint_albedo;

uniform bool		B_normal_enabled = true;
uniform sampler2D 	B_normal_map : hint_normal;
uniform float 		B_normal_strength : hint_range(-16., 16.0) = 1.;
uniform float 		B_normal_distance : hint_range(.001, 1.) = .025;

uniform float 		B_roughness : hint_range(0., 1.0) = 1.;

uniform vec4 		B_ao_tex_channel = vec4(.33, .33, .33, 0.);		
uniform bool		B_ao_enabled = true;
uniform float 		B_ao_strength : hint_range(-1., 1.0) = 1.; 
uniform sampler2D 	B_ao_map : hint_white;


uniform vec3 		B_uv_offset;
uniform int 		B_uv_tiles : hint_range(1, 16) = 1;
uniform float 		B_uv_scale : hint_range(0.,20.) = 8.;
uniform float 		B_tri_blend_sharpness : hint_range(0.001, 50.0) = 17.86;

varying vec3 		A_uv_triplanar_pos;
varying vec3 		A_uv_power_normal;
varying vec3 		B_uv_triplanar_pos;
varying vec3 		B_uv_power_normal;

varying vec3 		vertex_normal;
varying float		vertex_distance;




vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
        vec4 samp=vec4(0.0);
        samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
        samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
        samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
        return samp;
}


vec2 random2(vec2 st){
    st = vec2( dot(st,vec2(127.1,311.7)),
              dot(st,vec2(269.5,183.3)) );
    return -1.0 + 2.0*fract(sin(st)*43758.5453123);
}



float noise(vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    vec2 u = f*f*(3.0-2.0*f);

    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),
                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),
                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
}

float lines(in vec2 pos, float b){
    float scale = 10.0;
    pos *= scale;
    return smoothstep(0.0,
                    lamination_thickness+b*lamination_thickness,
                    abs((sin(pos.x*3.1415)+b*2.0))*.5);
}

void vertex() {
//	VERTEX = get_transvoxel_position(VERTEX, COLOR);
	vertex_normal = NORMAL;

    TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
    TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
    TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
    TANGENT = normalize(TANGENT);
    BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
    BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
    BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
    BINORMAL = normalize(BINORMAL);

    A_uv_power_normal=pow(abs(NORMAL),vec3(A_tri_blend_sharpness));
    A_uv_power_normal/=dot(A_uv_power_normal,vec3(1.0));
    A_uv_triplanar_pos = VERTEX * float(A_uv_tiles) / (16.) + A_uv_offset;			//On VoxelTerrain 16 is 100% size, so uv_tile is multiples of 16. 
	A_uv_triplanar_pos *= vec3(1.0,-1.0, 1.0);
	
    B_uv_power_normal=pow(abs(NORMAL),vec3(B_tri_blend_sharpness));
    B_uv_power_normal/=dot(B_uv_power_normal,vec3(1.0));
    B_uv_triplanar_pos = VERTEX * float(B_uv_tiles) / (16.)  + B_uv_offset;
	B_uv_triplanar_pos *= vec3(1.0,-1.0, 1.0);
	
	// Get the distance from camera to VERTEX (VERTEX as if the camera is 0,0,0)
	vertex_distance = (PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).z;		

}


void fragment() {
	
	//vec2 base_uv = A_uv_power_normal.xy;
	
	vec2 base_uv = A_uv_triplanar_pos.xz;

	// Nodule
	vec2 st = base_uv.xy*A_uv_scale;
	vec2 gaps = base_uv.xy*A_uv_scale*20.0;
	//st.y += 0.2*noise(st); // attempt to 
	vec3 nodule_mask = vec3(0.0);

    vec2 pos = st*vec2(10.,10.);//vec2(st*40.0); // stretch for linesw
	vec4 world_vertex = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	//    a = snoise(pos*vec2(cos(u_time*0.15),sin(u_time*0.1))*0.1)*3.1415;
    nodule_mask = vec3( smoothstep(0.5,0.6,noise(pos+sin(.4*TIME+world_vertex.x)+world_vertex.y)+.5 ))*smoothstep(0.08,0.15,noise(0.4*world_vertex.y+.2*sin(.3*TIME)+st*vec2(1.,1.5)));
	
	
	// Lamination
	vec2 st_side = B_uv_triplanar_pos.xy*B_uv_scale;
	
	// Lamination Waves 
	st_side.y += noise(st*lamination_compression)*lamination_waviness;
	vec2 pos_side = (st_side.yx - .1*sin(TIME*.4)) * vec2(lamination_layers,1.);
	
	vec3 lamination_mask = vec3(1.-lines(pos_side,0.5));
	
	// Deform baked textures. use `adjA` in lieu of `A_uv`
	vec3 A_adj_tri_pos = A_uv_triplanar_pos - .8 + 0.4*noise(A_uv_triplanar_pos.xz);
	vec3 B_adj_tri_pos = B_uv_triplanar_pos - .6 + 0.3*noise(B_uv_triplanar_pos.xz);
	
	// Build albedos
	
	vec3 A_albedo, B_albedo;
	float AB_mix_factor;
	if(A_albedo_enabled) {
		
		ALBEDO = A_albedo =  A_albedo_primary.rgb * clamp(nodule_mask*0.6 + 0.4*smoothstep(0.48,.6,triplanar_texture(A_albedo_map,A_uv_power_normal,A_adj_tri_pos).r),0.0,1.0)
		 + A_albedo_secondary.rgb * clamp(((1.-nodule_mask*.6) + 0.4*smoothstep(0.3,.5,triplanar_texture(A_albedo_map,A_uv_power_normal,A_adj_tri_pos).r)),0.,0.2);
		AB_mix_factor = clamp( AB_mix_normal*dot(vec3(0.,1.,0.), vertex_normal) + AB_mix_offset + AB_mix_blend*A_albedo.g, 0., 1.);
	}
	if(B_albedo_enabled) { 
		
		ALBEDO = B_albedo = B_albedo_primary.rgb*clamp(lamination_mask*.4 + 0.8*smoothstep(0.15,0.3,triplanar_texture(B_albedo_map,B_uv_power_normal,B_adj_tri_pos).r),0.,1.)
		+ B_albedo_secondary.rgb *  clamp((1.-lamination_mask) + smoothstep(0.3,0.4,triplanar_texture(B_albedo_map,B_uv_power_normal,B_adj_tri_pos).r),0.,1.);
		
	}
	if(A_albedo_enabled==true && B_albedo_enabled==true) {
		ALBEDO = mix(B_albedo, A_albedo, AB_mix_factor);
	}
	
	
	ROUGHNESS = mix(B_roughness, A_roughness, AB_mix_factor);


	// Calculate Normals
	
	vec3 A_normal=vec3(0.5,0.5,0.5);
	vec3 B_normal=vec3(0.5,0.5,0.5);
	float B_normal_faded=B_normal_strength;
	if(A_normal_enabled)
		A_normal = triplanar_texture(A_normal_map,A_uv_power_normal,A_adj_tri_pos).rgb;
		//A_normal = nodule_mask;
	if(B_normal_enabled)
		B_normal = triplanar_texture(B_normal_map,B_uv_power_normal,B_adj_tri_pos).rgb;
		// Fade out normal strength as it disappears into the distance 
		B_normal_faded = clamp(B_normal_strength/(B_normal_distance*vertex_distance), 0., B_normal_strength);
	if(A_normal_enabled || B_normal_enabled) {
		NORMALMAP = mix(B_normal, A_normal, AB_mix_factor);
		NORMALMAP_DEPTH = mix(B_normal_faded, A_normal_strength, AB_mix_factor);
	}


	// Calculate Ambient Occlusion
	
	float A_ao=1., B_ao=1.;
	if(A_ao_enabled) 
		AO = A_ao = dot(triplanar_texture(A_ao_map,A_uv_power_normal,A_uv_triplanar_pos),A_ao_tex_channel);
	if(B_ao_enabled)
		AO = B_ao = dot(triplanar_texture(B_ao_map,B_uv_power_normal,B_uv_triplanar_pos),B_ao_tex_channel);
	if(A_ao_enabled || B_ao_enabled) {
		AO = mix(B_ao, A_ao, AB_mix_factor);
		AO_LIGHT_AFFECT = mix(B_ao_strength, A_ao_strength, AB_mix_factor);
	}

	
}"
