[gd_resource type="Shader" format=2]

[resource]
code = "


shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;


uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

varying vec3 wNormal;
uniform float _TriplanarBlendSharpness : hint_range(2,20) = 5.0;


uniform vec4 color_primary : hint_color;



uniform vec4 color_secondary : hint_color;

uniform float lamination_layers : hint_range(2.,30.) = 4.;
uniform float lamination_thickness : hint_range(0.0,0.5) = 0.1;
uniform float lamination_waviness : hint_range(0.,0.15) = 0.1;


vec2 random2(vec2 st){
    st = vec2( dot(st,vec2(127.1,311.7)),
              dot(st,vec2(269.5,183.3)) );
    return -1.0 + 2.0*fract(sin(st)*43758.5453123);
}



float noise(vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    vec2 u = f*f*(3.0-2.0*f);

    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),
                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),
                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
}

float lines(in vec2 pos, float b){
    float scale = 10.0;
    pos *= scale;
    return smoothstep(0.0,
                    lamination_thickness+b*lamination_thickness,
                    abs((sin(pos.x*3.1415)+b*2.0))*.5);
}

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}



void vertex() {
	// TODO: Do I need this?
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	//calculate the world space normal
    wNormal = normalize((WORLD_MATRIX * vec4(NORMAL,0.0)).xyz);
}




void fragment() {
	

	
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	NORMALMAP_DEPTH = normal_scale;
	
	// init ALBEDO
    ALBEDO = vec3(0.0);
	
	// Triplanar Setup
	
	vec2 base_uv = UV;
	//base_uv = UV*WORLD_MATRIX;
	
	//calculate the blend weight
    vec3 blendWeights  = pow(abs(wNormal),vec3(_TriplanarBlendSharpness));
    blendWeights = blendWeights / (blendWeights.x + blendWeights.y + blendWeights.z);
    
	
	
	// Nodule
	vec2 st = base_uv.xy;
	st.y += 1.2*noise(st);
	vec3 nodule_mask = vec3(0.0);

	// make nodule mask
    vec2 pos = st*vec2(30.,50.);//vec2(st*40.0);
    nodule_mask = vec3( smoothstep(0.57,0.6,noise(pos)*.5+.5 ));
	
	// Lamination
	vec2 st_side = base_uv.xy;
	
	// waves
	st_side.y += noise(st*10.)*lamination_waviness;
	vec2 pos_side = st_side.yx * vec2(lamination_layers,1.);
	
	vec3 lamination_mask = vec3(1.-lines(pos_side,0.5));
	
	
	// make albedo textures top and side
	vec3 top_tex = color_primary.rgb * nodule_mask + color_secondary.rgb * (1.-nodule_mask);
	vec3 side_tex = color_primary.rgb * lamination_mask + color_secondary.rgb * (1.-lamination_mask);
	

	
	// Sides
    ALBEDO += clamp(side_tex.rgb * (blendWeights.x+blendWeights.z) ,0.,1.0);
	
       
	// Top & Bottom
	ALBEDO += clamp(top_tex.rgb * blendWeights.y,0.0,1.0);
	
   
	//ALBEDO = vec3(nodule_mask);
}
"
